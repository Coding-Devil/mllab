import numpy as np
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import OneHotEncoder, StandardScaler

class NeuralNetwork:
    def __init__(self, input_size, hidden_size, output_size):
        np.random.seed(42)
        self.w1 = np.random.rand(input_size, hidden_size)
        self.w2 = np.random.rand(hidden_size, output_size)
        self.b1 = np.random.rand(hidden_size)
        self.b2 = np.random.rand(output_size)

    def sigmoid(self, x):
        return 1 / (1 + np.exp(-x))

    def sigmoid_derivative(self, x):
        return x * (1 - x)

    def forward(self, x):
        self.h = self.sigmoid(np.dot(x, self.w1) + self.b1)
        return self.sigmoid(np.dot(self.h, self.w2) + self.b2)

    def backprop(self, x, y, output, lr):
        error = y - output
        d_output = error * self.sigmoid_derivative(output)
        d_hidden = d_output.dot(self.w2.T) * self.sigmoid_derivative(self.h)

        self.w1 += x.T.dot(d_hidden) * lr
        self.w2 += self.h.T.dot(d_output) * lr

        self.b1 += np.sum(d_hidden, axis=0) * lr
        self.b2 += np.sum(d_output, axis=0) * lr
        

    def train(self, x, y, lr, epochs):
        for _ in range(epochs):
            output = self.forward(x)
            self.backprop(x, y, output, lr)

    def predict(self, x):
        return self.forward(x)

    def accuracy(self, pred, true):
        return np.mean(np.argmax(pred, axis=1) == np.argmax(true, axis=1))

iris = load_iris()
X = iris.data
y = iris.target.reshape(-1, 1)

y = OneHotEncoder(sparse=False).fit_transform(y)
X = StandardScaler().fit_transform(X)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

nn = NeuralNetwork(input_size=4, hidden_size=5, output_size=3)
nn.train(X_train, y_train, lr=0.1, epochs=10000)

test_results = nn.predict(X_test)
print("Test Accuracy:", nn.accuracy(test_results, y_test))
